type: edu
custom_name: stage5
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.util.Scanner;

    class Encryptor {


        String encrypt3(String in, int key) {
            StringBuilder out = new StringBuilder(in);

            for(int i = 0; i < in.length(); i++) {
                if(in.charAt(i) >= ' ' && in.charAt(i) <= '~') {
                    int tmp = ((in.charAt(i) - 32 + key) % 95) + 32;
                    out.setCharAt(i, (char) tmp);
                }
            }

            return out.toString();
        }

        String decrypt3(String in, int key) {
            StringBuilder out = new StringBuilder(in);

            for(int i = 0; i < in.length(); i++) {
                if(in.charAt(i) >= ' ' && in.charAt(i) <= '~') {
                    int tmp = (in.charAt(i) - 32 - key);
                    tmp = tmp < 1 ? 95 + tmp : tmp;
                    tmp = (tmp % 95) + 32;
                    out.setCharAt(i, (char) tmp);
                }
            }

            return out.toString();
        }

        String encrypt2(String in, int key) {
            StringBuilder out = new StringBuilder(in);

            for(int i = 0; i < in.length(); i++) {
                if(in.charAt(i) >= 'a' && in.charAt(i) <= 'z') {
                    int tmp = ((in.charAt(i) - 96 + key) % 26) + 96;
                    out.setCharAt(i, (char) tmp);
                }
            }

            return out.toString();
        }

        String encrypt(String in) {
            StringBuilder out = new StringBuilder(in);
            for(int i = 0; i < in.length(); i++) {
                if(in.charAt(i) >= 'a' && in.charAt(i) <= 'z') {
                    out.setCharAt(i, (char) ('{' - in.charAt(i) + '`'));
                }
            }
            return out.toString();
        }
    }

    public class Main {
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            Encryptor ec = new Encryptor();

            String action = "enc";
            String inputString = "";
            int key = 0;
            String output;

            for (int i = 0; i < args.length; i += 2){
                switch (args[i]) {
                    case "-mode":
                        action = args[i+1];
                        break;
                    case "-key":
                        key = Integer.parseInt(args[i + 1]);
                        break;
                    case "-data":
                        inputString = args[i + 1];
                        break;
                    default:
                        break;
                }
            }

            if(action.equals("enc")) {
                output = ec.encrypt3(inputString, key);
            } else {
                output = ec.decrypt3(inputString, key);
            }

            System.out.println(output);
        }
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: output.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/249/implement#comment
status: Solved
record: 4
